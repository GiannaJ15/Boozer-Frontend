{"ast":null,"code":"import _classCallCheck from \"/Users/giannadelacruz/Desktop/boozer-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/giannadelacruz/Desktop/boozer-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/giannadelacruz/Desktop/boozer-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/giannadelacruz/Desktop/boozer-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/giannadelacruz/Desktop/boozer-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/giannadelacruz/Desktop/boozer-frontend/src/containers/Home.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n\n    _this.fetchWeather = function () {\n      fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(_this.state.userLat, \"&lon=\").concat(_this.state.userLong, \"&APPID=d35ef01ff2e6c622389f8553825100cd\")).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        console.log(response);\n\n        _this.setState({\n          weather: response.weather[0],\n          temperature: response.main.temp\n        });\n      });\n    };\n\n    _this.state = {\n      userLong: \"\",\n      userLat: \"\",\n      weather: \"\",\n      temperature: \"\"\n    };\n    return _this;\n  } // Problem with putting it here: componentWillReceiveProps rerenders the component every time a new prop is received.. this component is getting rendered three times, then getting\n  // the reason i did this function was bc in componenet did mount don thvae access to props _._\n\n\n  _createClass(Home, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      var _this2 = this;\n\n      fetch('http://ip-api.com/json/').then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        _this2.setState({\n          userLat: response.lat,\n          userLong: response.lon\n        });\n      }).then(this.fetchWeather);\n    }\n  }, {\n    key: \"renderSwitch\",\n    // This function is supposed to reccomend drinks based on the weather. I was going to search through the drinks for the drinks containing dark liquor, light liquor, whatever, then put them in an array and on each div render a .random drink HOWEVER, the cocktailContainer currently only holds the skimpy version of the cocktail information. The cocktail card holds the hearty information on each cocktail-- ive tried to get the info from the cocktail card up to the cocktail container, except that means we'd have to render a cocktail card before we have acccess to that information.. ive also tried to fetch information on an individual cocktail directly from cocktail container by iterating through the state of cocktails, and making a fetch request to each cocktails show page then adding each cocktail to a state called \"full cocktail objs\" using the spread operator, so that the previos cocktail added would still be there. But, it came out messy.. so we're just going to do it by name\n    // Sure this excludes SEVERAL cocktails, but whatever\n    value: function renderSwitch() {\n      var weatherIcon = \"http://openweathermap.org/img/w/\".concat(this.state.weather.icon, \".png\");\n      var sadCocktails = this.props.cocktails.filter(function (cocktail) {\n        return cocktail.description.includes(\"Whiskey\");\n      });\n      var temperature = Math.floor((this.state.temperature - 273.15) * (9 / 5) + 32) + 'Â°F';\n      var sadCocktail = sadCocktails[Math.floor(Math.random() * sadCocktails.length)];\n      var happyCocktails = this.props.cocktails.filter(function (cocktail) {\n        return cocktail.description.includes(\"beer\");\n      });\n      var happyCocktail = happyCocktails[Math.floor(Math.random() * happyCocktails.length)];\n\n      switch (this.state.weather.main) {\n        case \"Drizzle\":\n        case \"Rain\":\n        case \"Thunderstorm\":\n        case \"Clouds\":\n          return React.createElement(\"div\", {\n            className: \"weather\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            alt: this.state.weather.main,\n            src: weatherIcon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, \" \", temperature, \" \"), \"Perfect day to wallow in your misery. Why don't you drown your sorrows with a\", React.createElement(Link, {\n            to: \"/cocktails/\".concat(sadCocktail.name),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, sadCocktail.name));\n\n        case \"Clear\":\n          return React.createElement(\"div\", {\n            className: \"weather\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            alt: this.state.weather.main,\n            src: weatherIcon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          }), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, \" \", temperature, \" \"), \"Clear skies! Relax a little with a\", React.createElement(Link, {\n            to: \"/cocktails/\".concat(happyCocktail.name),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, happyCocktail.name));\n\n        case \"Snow\":\n          return React.createElement(\"div\", {\n            className: \"weather\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            alt: this.state.weather.main,\n            src: weatherIcon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, \" \", temperature, \" \"), \"Snow. Calm, yet solemn. Might I suggest a\", React.createElement(Link, {\n            to: \"/cocktails/\".concat(sadCocktail.name),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, sadCocktail.name), \" to help with all that self-reflection.\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"rendered\", this.props.cocktails.length);\n      return React.createElement(\"div\", {\n        className: \"homepage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"homeImage\",\n        alt: \"pouring drink\",\n        src: \"https://i.gifer.com/3W0t.gif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"drinkSuggestion\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.renderSwitch()));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/Users/giannadelacruz/Desktop/boozer-frontend/src/containers/Home.js"],"names":["React","Component","Link","Home","props","fetchWeather","fetch","state","userLat","userLong","then","resp","json","response","console","log","setState","weather","temperature","main","temp","lat","lon","weatherIcon","icon","sadCocktails","cocktails","filter","cocktail","description","includes","Math","floor","sadCocktail","random","length","happyCocktails","happyCocktail","name","renderSwitch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default class Home extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      userLong: \"\",\n      userLat: \"\",\n      weather: \"\",\n      temperature: \"\"\n    }\n  }\n\n  // Problem with putting it here: componentWillReceiveProps rerenders the component every time a new prop is received.. this component is getting rendered three times, then getting\n\n// the reason i did this function was bc in componenet did mount don thvae access to props _._\n  componentWillReceiveProps() {\n      fetch('http://ip-api.com/json/')\n        .then(resp => resp.json())\n          .then(response => {\n            this.setState({\n              userLat: response.lat,\n              userLong: response.lon\n            })\n          })\n            .then(this.fetchWeather)\n    }\n\n\n    fetchWeather = () => {\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.userLat}&lon=${this.state.userLong}&APPID=d35ef01ff2e6c622389f8553825100cd`)\n        .then(resp => resp.json())\n          .then((response) => {\n            console.log(response)\n            this.setState({\n              weather: response.weather[0],\n              temperature: response.main.temp\n            })\n          })\n    }\n\n\n  // This function is supposed to reccomend drinks based on the weather. I was going to search through the drinks for the drinks containing dark liquor, light liquor, whatever, then put them in an array and on each div render a .random drink HOWEVER, the cocktailContainer currently only holds the skimpy version of the cocktail information. The cocktail card holds the hearty information on each cocktail-- ive tried to get the info from the cocktail card up to the cocktail container, except that means we'd have to render a cocktail card before we have acccess to that information.. ive also tried to fetch information on an individual cocktail directly from cocktail container by iterating through the state of cocktails, and making a fetch request to each cocktails show page then adding each cocktail to a state called \"full cocktail objs\" using the spread operator, so that the previos cocktail added would still be there. But, it came out messy.. so we're just going to do it by name\n  // Sure this excludes SEVERAL cocktails, but whatever\n\n  renderSwitch() {\n\n    let weatherIcon = `http://openweathermap.org/img/w/${this.state.weather.icon}.png`\n\n    let sadCocktails = this.props.cocktails.filter(cocktail => {\n      return cocktail.description.includes(\"Whiskey\")\n    })\n\n    let temperature = (Math.floor(((((this.state.temperature)-273.15)*(9/5)+32)))+ 'Â°F')\n\n   let sadCocktail = sadCocktails[Math.floor(Math.random()*sadCocktails.length)]\n\n   let happyCocktails = this.props.cocktails.filter(cocktail => {\n     return cocktail.description.includes(\"beer\")\n   })\n\n    let happyCocktail = happyCocktails[Math.floor(Math.random()*happyCocktails.length)]\n\n\n    switch(this.state.weather.main) {\n      case \"Drizzle\":\n      case \"Rain\":\n      case \"Thunderstorm\":\n      case \"Clouds\":\n        return (\n          <div className = \"weather\">\n            <img alt = {this.state.weather.main} src= {weatherIcon} />\n            <h4> {temperature} </h4>\n            Perfect day to wallow in your misery.\n            Why don't you drown your sorrows with a\n            <Link to= {`/cocktails/${sadCocktail.name}`}>{sadCocktail.name}</Link>\n          </div>\n        )\n\n      case \"Clear\":\n          return (\n            <div className = \"weather\">\n            <img alt = {this.state.weather.main} src= {weatherIcon} />\n            <h4> {temperature} </h4>\n            Clear skies! Relax a little with a\n            <Link to= {`/cocktails/${happyCocktail.name}`}>{happyCocktail.name}</Link>\n            </div>\n          )\n          case \"Snow\":\n            return (\n              <div className = \"weather\">\n                <img alt = {this.state.weather.main} src= {weatherIcon} />\n                <h4> {temperature} </h4>\n                Snow. Calm, yet solemn. Might I suggest a\n                <Link to= {`/cocktails/${sadCocktail.name}`}>{sadCocktail.name}</Link> to help with all that self-reflection.\n              </div>\n            )\n    }\n  }\n\n  render () {\n    console.log(\"rendered\", this.props.cocktails.length)\n    return(\n      <div className= \"homepage\">\n        <div>\n          <img className = \"homeImage\" alt = \"pouring drink\" src = 'https://i.gifer.com/3W0t.gif'/>\n          </div>\n\n          <div className = \"drinkSuggestion\">\n            {this.renderSwitch()}\n          </div>\n      </div>\n    )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}